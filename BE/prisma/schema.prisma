generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id         Int    @id @default(autoincrement())
  name       String
  code       String
  cities     City[]
  deletedAt  DateTime? @db.Timestamp
  flats      Flat[]
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  regionId  Int
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade)
  flats     Flat[] 
  deletedAt  DateTime? @db.Timestamp
  }

model Flat {
  id               Int      @id @default(autoincrement())
  name             String
  price            Float?
  postalCode       String
  profilePictureId String?  @unique // Optional field with index for better performance
  profilePicture   File?     @relation("FlatPicture", fields: [profilePictureId], references: [id], onDelete: Cascade)
  type             String
  streetAddress    String
  bedrooms         String
  regionId         Int
  region           Region    @relation(fields: [regionId], references: [id], onDelete: Cascade)
  agentId          Int    
  cityId           Int?      // Optional: if flats are associated with specific cities
  city             City?     @relation(fields: [cityId], references: [id], onDelete: Cascade)   
  agent            Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  deletedAt        DateTime? @db.Timestamp
}

model File {
  id             String  @id @default(uuid())
  name           String
  path           String
  size           Int
  deletedAt      DateTime? 
  associatedFlat Flat[]  @relation("FlatPicture")
}


model Agent {
  id          Int      @id @default(autoincrement()) 
  name        String   
  surname     String   
  phoneNumber String   
  email       String   @unique
  photo       String? 
  flats       Flat[] 

  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
  deletedAt   DateTime?
}